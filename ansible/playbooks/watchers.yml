- hosts: watchers
  gather_facts: true
  become: true
  tasks:
    - block:
      - name: check if v4l2rtspserver is already installed
        shell: which v4l2rtspserver
        register: install_state
        ignore_errors: true

      - name: install v4l2rtspserver dependencies
        apt:
          name: "{{ packages }}"
          state: present
          update_cache: yes
        vars:
          packages:
            - git
            - cmake

      - name: clone v4l2rtspserver git repo
        git:
          repo: https://github.com/mpromonet/v4l2rtspserver.git
          dest: /tmp/v4l2rtspserver
        when: install_state.stdout_lines == ""

      - name: build and compile v4l2rtspserver
        shell: |
          cd /tmp/v4l2rtspserver
          cmake .
          make
          make install
        when: install_state.stdout_lines == ""

      - name: install extra v4l2rtspserver
        apt:
          name: "{{ packages }}"
          state: present
          update_cache: yes
        vars:
          packages:
            - v4l-utils
            - uvcdynctrl
      when: option == "install"

    - block:
      - name: import watcher_username
        shell: |
          source ../../src/elise.sh;
          echo "${WATCHER_USERNAME}"
        delegate_to: localhost
        register: watcher_username

      - name: import watcher_password
        shell: |
          source ../../src/elise.sh;
          echo "${WATCHER_PASSWORD}"
        delegate_to: localhost
        register: watcher_password

      - name: configure webcams - watcher01.labs.elysianskies.com
        shell: |
          v4l2-ctl -d {{ item }} --set-ctrl=led1_mode=0
          v4l2-ctl -d {{ item }} --set-ctrl=sharpness=255
          v4l2-ctl -d {{ item }} --set-ctrl=focus_auto=0
          v4l2-ctl -d {{ item }} --set-ctrl=focus_absolute=0
        with_items:
          - /dev/video0
          - /dev/video2
        when:
          - ansible_fqdn == "watcher01.labs.elysianskies.com"

      - name: start rtsp streams - watcher01.labs.elysianskies.com
        shell: |
          nohup v4l2rtspserver \
            -P {{ item.port }} -p {{ item.port }} \
            -U {{ item.username }}:{{ item.password }} \
            -W 640 -H 480 \
            -u {{ item.name }} {{ item.device }} &
        no_log: true
        with_items:
          - name: doorway
            port: '8554'
            username: "{{ watcher_username.stdout }}"
            password: "{{ watcher_password.stdout }}"
            device: /dev/video0
          - name: dining
            port: '8555'
            username: "{{ watcher_username.stdout }}"
            password: "{{ watcher_password.stdout }}"
            device: /dev/video2
        when:
          - ansible_fqdn == "watcher01.labs.elysianskies.com"

      - name: configure webcams - watcher02.labs.elysianskies.com
        shell: |
          v4l2-ctl -d {{ item }} --set-ctrl=led1_mode=0
          v4l2-ctl -d {{ item }} --set-ctrl=sharpness=255
          v4l2-ctl -d {{ item }} --set-ctrl=focus_auto=0
          v4l2-ctl -d {{ item }} --set-ctrl=focus_absolute=0
        with_items:
          - /dev/video0
          - /dev/video2
        when:
          - ansible_fqdn == "watcher02.labs.elysianskies.com"

      - name: start rtsp streams - watcher02.labs.elysianskies.com
        shell: |
          nohup v4l2rtspserver \
            -P {{ item.port }} -p {{ item.port }} \
            -U {{ item.username }}:{{ item.password }} \
            -W 640 -H 480 \
            -u {{ item.name }} {{ item.device }} &
        no_log: true
        with_items:
          - name: safe
            port: '8554'
            username: "{{ watcher_username.stdout }}"
            password: "{{ watcher_password.stdout }}"
            device: /dev/video0
          - name: office
            port: '8555'
            username: "{{ watcher_username.stdout }}"
            password: "{{ watcher_password.stdout }}"
            device: /dev/video2
        when:
          - ansible_fqdn == "watcher02.labs.elysianskies.com"
      when: option == "start"

    - block:
      - name: kill all rtsp streams
        shell: |
          for pid in $(/bin/pidof v4l2rtspserver); do \
              kill -9 $pid; \
          done
      when: option == "stop"
