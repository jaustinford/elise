- hosts: master_node
  become: true
  tasks:
    - name: import LAB_FQDN
      shell: |
        source ../../src/elise.sh;
        echo "${LAB_FQDN}"
      no_log: true
      delegate_to: localhost
      register: lab_fqdn

    - name: import KUBE_POD_NETWORK
      shell: |
        source ../../src/elise.sh;
        echo "${KUBE_POD_NETWORK}"
      no_log: true
      delegate_to: localhost
      register: kube_pod_network

    - name: initialize kubernetes cluster
      shell: |
        kubeadm init \
          --apiserver-advertise-address="{{ ansible_default_ipv4.address }}" \
          --pod-network-cidr="{{ kube_pod_network.stdout }}" \
          --apiserver-cert-extra-sans="{{ lab_fqdn.stdout }}"

    - name: import new kubeconfig
      shell: cat /etc/kubernetes/admin.conf
      register: kube_config

    - name: generate new kubeconfig
      shell: |
        ca=$(echo "{{ kube_config.stdout }}" | grep certificate-authority-data\: | awk '{print $2}');
        crt=$(echo "{{ kube_config.stdout }}" | grep client-certificate-data\: | awk '{print $2}');
        key=$(echo "{{ kube_config.stdout }}" | grep client-key-data\: | awk '{print $2}');
        sed -i -E "s/^KUBE_CONFIG_CERTIFICATE_AUTHORITY_DATA.*$/KUBE_CONFIG_CERTIFICATE_AUTHORITY_DATA='$ca'/g" ../../src/elise.sh;
        sed -i -E "s/^KUBE_CONFIG_CLIENT_CERTIFICATE_DATA.*$/KUBE_CONFIG_CLIENT_CERTIFICATE_DATA='$crt'/g" ../../src/elise.sh;
        sed -i -E "s/^KUBE_CONFIG_CLIENT_KEY_DATA.*$/KUBE_CONFIG_CLIENT_KEY_DATA='$key'/g" ../../src/elise.sh;
        source ../../src/elise.sh;
        source ../../src/general.sh;
        source ../../src/kubernetes.sh;
        kube_config '/root' "{{ lab_fqdn.stdout }}"
      delegate_to: localhost

    - name: deploy flannel pod network
      shell: /root/manifests/kube-flannel.sh apply
      delegate_to: localhost

    - name: deploy nginx ingress controller
      shell: /root/manifests/ingress-nginx.sh apply
      delegate_to: localhost

    - name: generate join command
      shell: kubeadm token create --print-join-command
      register: join_command

    - name: copy join command to local file
      copy:
        content: "{{ join_command.stdout_lines[0] }}"
        dest: /tmp/join-command
      delegate_to: localhost

- hosts: worker_nodes
  become: true
  tasks:
    - name: copy the join command to server location
      copy:
        src: /tmp/join-command
        dest: /tmp/join-command.sh
        mode: 0777

    - name: join nodes to cluster
      shell: "sh /tmp/join-command.sh"
    
    - name: cleanup join-command on worker_nodes
      file:
        path: /tmp/join-command.sh
        state: absent

    - name: cleanup join-command on localhost
      file:
        path: /tmp/join-command
        state: absent
      delegate_to: localhost
