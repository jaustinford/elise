- hosts: master_node
  gather_facts: false
  become: true
  tasks:
    - name: import lab fqdn
      shell: |
        source ../../src/elise.sh;
        echo "${LAB_FQDN}"
      delegate_to: localhost
      register: lab_fqdn_var

    - name: import haproxy.cfg
      shell: cat ../../files/haproxy.cfg
      delegate_to: localhost
      register: haproxy_cfg

    - name: import haproxy crt
      shell: |
        source ../../src/kubernetes.sh;
        pod_from_deployment 'eslabs' 'acme' 'wait';
        kube_exec 'eslabs' "$pod" 'acme' 'cat /etc/letsencrypt/live/{{ lab_fqdn_var.stdout }}/fullchain.pem'
      delegate_to: localhost
      register: haproxy_crt

    - name: import haproxy key
      shell: |
        source ../../src/kubernetes.sh;
        pod_from_deployment 'eslabs' 'acme' 'wait';
        kube_exec 'eslabs' "$pod" 'acme' 'cat /etc/letsencrypt/live/{{ lab_fqdn_var.stdout }}/privkey.pem'
      delegate_to: localhost
      register: haproxy_key

    - name: "{{ message }} haproxy container"
      docker_container:
        image: haproxy:latest
        name: haproxy
        state: "{{ container_state }}"
        recreate: "{{ recreate_container }}"
        # enable these sysctls to prevent syn-flood type attacks
        sysctls:
          net.ipv4.tcp_syncookies: 1
          net.ipv4.conf.all.rp_filter: 1
          net.ipv4.tcp_max_syn_backlog: 1024
        command: |
          /bin/bash -c '\
            echo "{{ haproxy_cfg.stdout }}" > /usr/local/etc/haproxy/haproxy.cfg; \
            echo "{{ haproxy_crt.stdout }}" > /usr/local/etc/haproxy/nginx.crt; \
            echo "{{ haproxy_key.stdout }}" > /usr/local/etc/haproxy/nginx.crt.key; \
            chmod 755 /usr/local/etc/haproxy/haproxy.cfg; \
            chmod 750 /usr/local/etc/haproxy/nginx.crt; \
            chmod 600 /usr/local/etc/haproxy/nginx.crt.key; \
            haproxy -f /usr/local/etc/haproxy/haproxy.cfg'
        ports:
          - '443:443'
          - '80:80'
        network_mode: bridge
        restart_policy: unless-stopped
